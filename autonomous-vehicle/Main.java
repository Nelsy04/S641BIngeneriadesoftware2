
import java.util.Scanner;

/**
 * CLASE MAIN CON MEN√ö INTERACTIVO
 * Permite seleccionar diferentes configuraciones de veh√≠culos
 */
public class Main {
    
    private static Scanner scanner = new Scanner(System.in);
    
    public static void main(String[] args) {
        System.out.println("üöó === SISTEMA DE CONFIGURACI√ìN DE VEH√çCULOS AUT√ìNOMOS ===\n");
        
        boolean salir = false;
        
        while (!salir) {
            mostrarMenu();
            int opcion = obtenerOpcion();
            
            switch (opcion) {
                case 1:
                    configuracionBase();
                    break;
                case 2:
                    configuracionSegura();
                    break;
                case 3:
                    configuracionPremium();
                    break;
                case 4:
                    configuracionPersonalizada();
                    break;
                case 5:
                    configuracionLujo();
                    break;
                case 6:
                    configuracionPersonalizadaAvanzada();
                    break;
                case 0:
                    salir = true;
                    System.out.println("¬°Gracias por usar el sistema! üëã");
                    break;
                default:
                    System.out.println("‚ùå Opci√≥n no v√°lida. Intente nuevamente.");
            }
            
            if (!salir) {
                System.out.println("\n" + "=".repeat(60) + "\n");
            }
        }
        
        scanner.close();
    }
    
    /**
     * Muestra el men√∫ de opciones
     */
    private static void mostrarMenu() {
        System.out.println("üìã CONFIGURACIONES DISPONIBLES:");
        System.out.println("1. üöó Veh√≠culo Base");
        System.out.println("2. üõ°Ô∏è  Veh√≠culo Seguro");
        System.out.println("3. ‚≠ê Veh√≠culo Premium");
        System.out.println("4. üé® Veh√≠culo Personalizado");
        System.out.println("5. üíé Veh√≠culo de Lujo");
        System.out.println("6. üîß Configuraci√≥n Personalizada Avanzada");
        System.out.println("0. ‚ùå Salir");
        System.out.print("\nSeleccione una opci√≥n (0-6): ");
    }
    
    /**
     * Obtiene y valida la opci√≥n del usuario
     */
    private static int obtenerOpcion() {
        try {
            return Integer.parseInt(scanner.nextLine());
        } catch (NumberFormatException e) {
            return -1;
        }
    }
    
    // =============================================
    // CONFIGURACIONES PREDEFINIDAS
    // =============================================
    
    /**
     * Configuraci√≥n 1: Veh√≠culo Base
     */
    private static void configuracionBase() {
        System.out.println("\nüîß CONFIGURANDO: VEH√çCULO BASE");
        SistemaVehicular vehiculo = new SistemaBase();
        mostrarVehiculoDetallado("Veh√≠culo Base", vehiculo);
    }
    
    /**
     * Configuraci√≥n 2: Veh√≠culo Seguro
     */
    private static void configuracionSegura() {
        System.out.println("\nüîß CONFIGURANDO: VEH√çCULO SEGURO");
        SistemaVehicular vehiculo = new ControlFatiga(
                                    new DeteccionPeatones(
                                        new SistemaBase()));
        mostrarVehiculoDetallado("Veh√≠culo Seguro", vehiculo);
    }
    
    /**
     * Configuraci√≥n 3: Veh√≠culo Premium
     */
    private static void configuracionPremium() {
        System.out.println("\nüîß CONFIGURANDO: VEH√çCULO PREMIUM");
        SistemaVehicular vehiculo = new ControlClima(
                                    new ControlFatiga(
                                        new EstacionamientoAutomatico(
                                            new DeteccionPeatones(
                                                new SistemaBase()))));
        mostrarVehiculoDetallado("Veh√≠culo Premium", vehiculo);
    }
    
    /**
     * Configuraci√≥n 4: Veh√≠culo Personalizado B√°sico
     */
    private static void configuracionPersonalizada() {
        System.out.println("\nüîß CONFIGURANDO: VEH√çCULO PERSONALIZADO");
        SistemaVehicular vehiculo = new EstacionamientoAutomatico(
                                    new ControlClima(
                                        new SistemaBase()));
        mostrarVehiculoDetallado("Veh√≠culo Personalizado", vehiculo);
    }
    
    /**
     * Configuraci√≥n 5: Veh√≠culo de Lujo
     */
    private static void configuracionLujo() {
        System.out.println("\nüîß CONFIGURANDO: VEH√çCULO DE LUJO");
        SistemaVehicular vehiculo = new ControlClima(
                                    new ControlClima(
                                        new EstacionamientoAutomatico(
                                            new DeteccionPeatones(
                                                new SistemaBase()))));
        mostrarVehiculoDetallado("Veh√≠culo de Lujo", vehiculo);
    }
    
    // =============================================
    // CONFIGURACI√ìN INTERACTIVA AVANZADA
    // =============================================
    
    /**
     * Configuraci√≥n 6: Personalizada Avanzada
     */
    private static void configuracionPersonalizadaAvanzada() {
        System.out.println("\nüîß CONFIGURACI√ìN PERSONALIZADA AVANZADA");
        System.out.println("Seleccione los m√≥dulos que desea incluir:\n");
        
        SistemaVehicular vehiculo = new SistemaBase();
        
        // Men√∫ de m√≥dulos disponibles
        boolean[] modulosSeleccionados = seleccionarModulos();
        
        // Aplicar los m√≥dulos seleccionados en el orden especificado
        if (modulosSeleccionados[0]) { // Detecci√≥n de Peatones
            vehiculo = new DeteccionPeatones(vehiculo);
            System.out.println("‚úÖ M√≥dulo de Detecci√≥n de Peatones agregado");
        }
        
        if (modulosSeleccionados[1]) { // Estacionamiento Autom√°tico
            vehiculo = new EstacionamientoAutomatico(vehiculo);
            System.out.println("‚úÖ M√≥dulo de Estacionamiento Autom√°tico agregado");
        }
        
        if (modulosSeleccionados[2]) { // Control de Fatiga
            vehiculo = new ControlFatiga(vehiculo);
            System.out.println("‚úÖ M√≥dulo de Control de Fatiga agregado");
        }
        
        if (modulosSeleccionados[3]) { // Control de Clima
            vehiculo = new ControlClima(vehiculo);
            System.out.println("‚úÖ M√≥dulo de Control de Clima agregado");
        }
        
        mostrarVehiculoDetallado("Su Veh√≠culo Personalizado", vehiculo);
    }
    
    /**
     * Permite al usuario seleccionar qu√© m√≥dulos incluir
     */
    private static boolean[] seleccionarModulos() {
        boolean[] modulos = new boolean[4];
        
        System.out.println("¬øIncluir Detecci√≥n de Peatones? (+$8,000) (s/n): ");
        modulos[0] = scanner.nextLine().equalsIgnoreCase("s");
        
        System.out.println("¬øIncluir Estacionamiento Autom√°tico? (+$6,000) (s/n): ");
        modulos[1] = scanner.nextLine().equalsIgnoreCase("s");
        
        System.out.println("¬øIncluir Control de Fatiga? (+$4,000) (s/n): ");
        modulos[2] = scanner.nextLine().equalsIgnoreCase("s");
        
        System.out.println("¬øIncluir Control de Clima? (+$3,000) (s/n): ");
        modulos[3] = scanner.nextLine().equalsIgnoreCase("s");
        
        return modulos;
    }
    
    // =============================================
    // M√âTODOS AUXILIARES DE VISUALIZACI√ìN
    // =============================================
    
    /**
     * Muestra informaci√≥n detallada del veh√≠culo
     */
    private static void mostrarVehiculoDetallado(String nombre, SistemaVehicular vehiculo) {
        System.out.println("\n" + "‚ú®".repeat(25));
        System.out.println("üöó " + nombre.toUpperCase());
        System.out.println("‚ú®".repeat(25));
        
        System.out.println("üìã FUNCIONALIDADES:");
        String[] funciones = vehiculo.getFunciones().split(", ");
        for (String funcion : funciones) {
            System.out.println("   ‚úì " + funcion);
        }
        
        System.out.println("\nüí∞ COSTO TOTAL: $" + String.format("%,.2f", vehiculo.getCosto()));
        
        // Mostrar desglose de costos
        mostrarDesgloseCostos(vehiculo);
        
        System.out.println("\nüéØ RESUMEN:");
        System.out.println("   ‚Ä¢ " + funciones.length + " funcionalidades incluidas");
        System.out.println("   ‚Ä¢ Sistema listo para operar");
        System.out.println("   ‚Ä¢ Configuraci√≥n aplicada exitosamente");
    }
    
    /**
     * Muestra el desglose detallado de costos
     */
    private static void mostrarDesgloseCostos(SistemaVehicular vehiculo) {
        System.out.println("\nüìä DESGLOSE DE COSTOS:");
        
        // Este es un ejemplo simplificado - en una implementaci√≥n real
        // podr√≠as tener m√©todos para obtener el desglose
        
        double costoBase = 50000;
        double costoModulos = vehiculo.getCosto() - costoBase;
        
        System.out.println("   ‚Ä¢ Sistema Base: $" + String.format("%,.2f", costoBase));
        System.out.println("   ‚Ä¢ M√≥dulos Adicionales: $" + String.format("%,.2f", costoModulos));
        System.out.println("   ‚Ä¢ TOTAL: $" + String.format("%,.2f", vehiculo.getCosto()));
    }
    
    /**
     * M√©todo original mejorado
     */
    private static void mostrarVehiculo(String nombre, SistemaVehicular vehiculo) {
        System.out.println("üîß " + nombre + ":");
        System.out.println("   üìã Funciones: " + vehiculo.getFunciones());
        System.out.println("   üí∞ Costo total: $" + String.format("%,.2f", vehiculo.getCosto()));
        
        // Crear separador manualmente
        StringBuilder separador = new StringBuilder();
        for (int i = 0; i < 50; i++) {
            separador.append("-");
        }
        System.out.println("   " + separador.toString());
    }
}